---
pagetitle: "CohortConstructor"
format:
  revealjs: 
    theme: [simple, style_theory.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Developed by Edward Burn, Marti Catala, Nuria Mercade-Besora, Marta Alcalde-Herraiz, Mike Du, Yuchen Guo."
execute:
  echo: true
  eval: true
  warning: false
  output-width: 100%
editor: visual
---

```{r, echo=FALSE}
options(width = 130)
```

# CohortConstructor {.title-slide}

An R package to build and curate cohorts in the OMOP Common Data Model

::: title-slide-logos
<img src="logoCC.png" alt="Logo 1" class="logo"/> <img src="logoHDS.png" alt="Logo 2" class="logo"/> <img src="logoOHDSI.png" alt="Logo 3" class="logo"/>
:::

## Introduction

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

-   CohortConstructor package is designed to support cohort building pipelines in R.

::: {style="margin-bottom: 10px;"}
:::

-   The approach taken to create cohorts is to first build a set of **base cohorts**, and then apply **inclusion criteria** to derive the final study cohorts of interest.

::: {style="margin-bottom: 10px;"}
:::

-   The code is publicly available in OHDSI's GitHub repository [CohortConstructor](https://github.com/OHDSI/CohortConstructor).

::: {style="margin-bottom: 10px;"}
:::

-   Vignettes with further information can be found in the package [website](https://ohdsi.github.io/CohortConstructor/index.html){.link}.

::: {style="margin-bottom: 10px;"}
:::

-   Available from [CRAN](https://cran.r-project.org/web/packages/CohortConstructor/CohortConstructor.pdf){.link}.

## Function sets

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: columns
::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Built base cohorts** *Cohort construction based on concept sets or demographic requirements on the database population.*
:::
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Applying cohort requirements** *Impose study specific inclusion and exclusion criteria to cohorts in the database.*
:::
:::
:::
:::

::: {.column width="5%"}
:::
:::

::: columns
::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Update cohort start and end dates** *Modify start and end dates of subject's in a cohort.*
:::
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Cohort manipulation** *Generate new cohorts by manipulating a set of cohorts in the database.*
:::
:::
:::
:::

::: {.column width="5%"}
:::
:::


# Built base cohorts

## Functions to build base cohorts

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 25px;"}
:::

-   `demographicsCohort()`

::: {style="margin-bottom: 10px;"}
:::

-   `conceptCohort()`

::: {style="margin-bottom: 10px;"}
:::

-   `measurementCohort()`

## Demographic based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 15px;"}
:::

```{r, echo=FALSE}
library(CDMConnector)
library(CodelistGenerator)
library(CohortConstructor)
library(CohortCharacteristics)
library(dplyr)
con <- DBI::dbConnect(duckdb::duckdb(), 
                      dbdir = eunomia_dir())
cdm <- cdm_from_con(con, cdm_schema = "main", 
                    write_schema = c(prefix = "my_study_", schema = "main"))
```

```{r}
cdm$age_cohort <- demographicsCohort(cdm = cdm, 
                                     ageRange = c(18, 65), 
                                     name = "age_cohort")

settings(cdm$age_cohort)
```

::: {style="margin-bottom: 20px;"}
:::

. . .

```{r}
cohortCount(cdm$age_cohort)
```

::: {style="margin-bottom: 20px;"}
:::

. . .

```{r}
attrition(cdm$age_cohort)
```

## Demographic based - Example

::: {style="margin-bottom: 20px;"}
:::

. . .

```{r}
# CohortCharacteristics R package
summary(cdm$age_cohort) |> plotCohortAttrition()
```

## Concept based

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

-   Base cohorts are built **by domain** rather than by cohort definition.

::: {style="margin-bottom: 5px;"}
:::

-   This approach reduces the joins to OMOP CDM tables by using all the `concept sets` together, making it less computationally expensive.

. . .

![Workflow to built 5 base cohorts: asthma, COPD, diabetes, acetaminophen and warfarin.](cohort_by_domain.png)

## Concept based - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 15px;"}
:::

-   Get relevant codelists

. . .

```{r}
drug_codes <- getDrugIngredientCodes(cdm, 
                                     name = c("diclofenac", "acetaminophen"))
drug_codes
```

-   Create concept based cohorts

. . .

```{r}
cdm$medications <- conceptCohort(cdm = cdm, 
                                 conceptSet = drug_codes, 
                                 name = "medications")
settings(cdm$medications)
```

## Concept based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 15px;"}
:::

-   Cohort codelist as an attribute

. . .

```{r}
attr(cdm$medications, "cohort_codelist")
```

## Your turn - Set up {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 15px;"}
:::

-   Relevant packages

. . .

```{r}
library(CDMConnector)
library(CodelistGenerator)
library(CohortConstructor)
library(dplyr)
```

::: {style="margin-bottom: 15px;"}
:::

-   Let's create a cdm object (Eunomia database)

. . .

```{r, message=TRUE}
con <- DBI::dbConnect(duckdb::duckdb(), 
                      dbdir = eunomia_dir())
cdm <- cdm_from_con(con, cdm_schema = "main", 
                    write_schema = c(prefix = "my_study_", schema = "main"))

cdm
```

## Your turn 

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 25px;"}
:::

- Create a cohort of aspirin use.

::: {style="margin-bottom: 10px;"}
:::

- How many records does it have? And how many subjects?

. . .

*Move forward in the presentation for the results.*

## Your turn 

```{r, echo=FALSE}
aspirin_codes <- getDrugIngredientCodes(cdm, name = c("aspirin"))

cdm$aspirin <- conceptCohort(cdm = cdm, 
                             conceptSet = aspirin_codes, 
                             name = "aspirin")
```

```{r}
cohortCount(cdm$aspirin)
```

# Applying cohort requirements

## Functions to apply cohort requirements

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

::: columns
::: {.column width="50%"}
-   On demographics

  -`requireDemographics()`

  -`requireAge()`

  -`requireSex()`

  -`requirePriorObservation()`

  -`requireFutureObservation()`

::: {style="margin-bottom: 10px;"}
:::

-   On cohort entries

  -`requireIsFirstEntry()`

  -`requireIsLastEntry()`
:::

::: {.column width="50%"}
-   On cohort dates

  -`requireInDateRange()`

::: {style="margin-bottom: 10px;"}
:::

-   Require presence or absence based on other cohorts, tables and concepts

  -`requireCohortIntersectFlag()`

  -`requireConceptIntersectFlag()`

  -`requireTableIntersectFlag()`

  -`requireDeathFlag()`
:::
:::

## Deriving study cohorts from base cohorts {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 15px;"}
:::

::: columns
::: {.column width="50%"}
**Current approach**

![](combined_cohort_1.png)
:::

::: {.column width="50%"}
**CohortConstructor**

![](combined_cohort_2.png)
:::
:::

## Requirement functions - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

-   We can apply different inclusion and exclusion criteria using CohortConstructor's functions in a pipe-line fashion. For instance, in what follows we require

  -only first record per person

  -subjects 18 years old or more at cohort start date

  -only females

  -more than 180 days of prior observation at cohort start date

. . .

```{r, echo=FALSE}
cdm$medications <- conceptCohort(cdm = cdm, 
                                 conceptSet = drug_codes, 
                                 name = "medications")
```

```{r}
cdm$medications <- cdm$medications %>% 
  requireIsFirstEntry() %>% 
  requireDemographics(
    ageRange = list(c(18, 85)),
    sex = "Female", 
    minPriorObservation = 30
  )
```

## Requirement functions - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Diclofenac attrition:

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
summary(cdm$medications) |> 
  visOmopResults::filterSettings(cohort_name == "diclofenac") |>
  plotCohortAttrition()
```

## Requirement functions - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Acetaminophen attrition:

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
summary(cdm$medications) |> 
  visOmopResults::filterSettings(cohort_name == "acetaminophen") |>
  plotCohortAttrition()
```

## Requirement functions - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

-   Require no history of GI bleed

. . .

```{r}
cdm$medications_no_gi_bleed <- cdm$medications %>%
  requireConceptIntersectFlag(conceptSet = list("gi_bleed" = 192671), 
                              indexDate = "cohort_start_date", 
                              window = c(-Inf, 0), 
                              negate = TRUE,
                              name = "medications_no_gi_bleed") 
```

## Requirement functions - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Diclofenac attrition:

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
summary(cdm$medications) |> 
  visOmopResults::filterSettings(cohort_name == "diclofenac") |>
  plotCohortAttrition()
```

## Requirement functions - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Acetaminophen attrition:

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
summary(cdm$medications) |> 
  visOmopResults::filterSettings(cohort_name == "acetaminophen") |>
  plotCohortAttrition()
```

## `name` argument

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

- **Purpose:** Specifies the name for the new cohort table in the database.

::: {style="margin-bottom: 10px;"}
:::

- **Default Behavior:** If not provided, the function uses the input cohort’s name.

::: {style="margin-bottom: 10px;"}
:::

- **Warning:** Omitting the name argument will overwrite the existing cohort table.

## Your turn

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Create a **new cohort** named "*aspirin_last*" by applying the following criteria to the base aspirin cohort:

::: {style="margin-bottom: 10px;"}
:::

- Last Drug Exposure: Include only the last drug exposure for each subject.

::: {style="margin-bottom: 5px;"}
:::

- Date range: Include exposures starting between January 1, 1960, and December 31, 1979.

::: {style="margin-bottom: 5px;"}
:::

- Exclusion: Exclude individuals with an amoxicillin exposure in the 7 days prior to the aspirin exposure.

::: {style="margin-bottom: 20px;"}
:::

. . .

Refer to the package [website](https://ohdsi.github.io/CohortConstructor/reference/index.html) for a summary of the package functions with a short description.

. . .

*Move forward in the presentation for the results.*

## Your turn

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
amoxicillin_codes <- getDrugIngredientCodes(cdm, "amoxicillin")
cdm$aspirin_last <- cdm$aspirin |>
  requireIsLastEntry(name = "aspirin_last") |>
  requireInDateRange(dateRange = as.Date(c("1960-01-01", "1979-12-31"))) |>
  requireConceptIntersectFlag(
    conceptSet = amoxicillin_codes,
    window = list(c(-7,-1)),
    negate = TRUE
  )
```

```{r}
cohortCount(cdm$aspirin_last)
```

::: {style="margin-bottom: 20px;"}
:::

```{r}
cohortAttrition(cdm$aspirin_last)
```

. . .

*Move forward in the presentation to get some tips on how to solve it…*

. . .

*Or don’t, and try to solve it with the content seen so far! :)*

## Tips

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

- Find in the package website which function limits cohort entries to the first or last to get the last drug exposure of a subject.

::: {style="margin-bottom: 10px;"}
:::

- Find in the package website which function impose date requirements on cohort dates.

::: {style="margin-bottom: 10px;"}
:::

- Use CodelistGenerator to find amoxicillin codes, and then use the relevant requirement function to impose the absence of those concepts in the pertinent time-window.


# Update cohort start and end dates

## Functions to update cohort start and end dates

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

::: columns
::: {.column width="50%"}
-   Cohort exit

  -`exitAtObservationEnd()`

  -`exitAtDeath()`

  -`exitAtFirstDate()`

  -`exitAtLastDate()`

::: {style="margin-bottom: 10px;"}
:::

-   Cohort entry

  -`entryAtFirstDate()`

  -`entryAtLastDate()`
:::

::: {.column width="50%"}
-   Trim start and end dates

  -`trimDemographics()`

  -`trimToDateRange()`
:::
:::

## Update cohort start and end dates - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 15px;"}
:::

-   We can set the end date to the end of the subject's observation period

. . .

```{r}
cdm$medications <- cdm$medications %>%
  exitAtObservationEnd()

cdm$medications
```

## Update cohort start and end dates - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

-   We can also trim start and end dates to match demographic requirements

-   i.e. cohort dates can be trimmed so the subject contributes time while he is 20 to 40 years old, and has a prior observation of 365 days

. . .

```{r}
cdm$medications_trimmed <- cdm$medications %>%
  trimDemographics(ageRange = list(c(20, 40)),
                   minPriorObservation = 365,
                   name = "medications_trimmed")
```

## Update cohort start and end dates - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Diclofenac attrition:

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
summary(cdm$medications) |> 
  visOmopResults::filterSettings(cohort_name == "diclofenac") |>
  plotCohortAttrition()
```

## Update cohort start and end dates - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

Acetaminophen attrition:

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
summary(cdm$medications) |> 
  visOmopResults::filterSettings(cohort_name == "acetaminophen") |>
  plotCohortAttrition()
```


## Your turn

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

**1)** Create new cohort called "*aspirin_death*", from the "*aspirin_last*" cohort, that

- Only includes subjects with a record of death.

- Subjects leave the cohort at death date.

::: {style="margin-bottom: 20px;"}
:::

. . .

**2)** Create a second cohort called "*aspirin_30days*", from the "*aspirin_last*" cohort, in which

- Subjects contribute during the first 30 days of taking aspirin, or until the end of the drug exposure if it is shorter than 30 days.

- How many people leave after 30 days? And how many people leave before that?

::: {style="margin-bottom: 20px;"}
:::


. . .

*Move forward in the presentation for the results.*

## Your turn 

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
cdm$aspirin_death <- cdm$aspirin_last |>
  exitAtDeath(requireDeath = TRUE,
              name = "aspirin_death")
cdm$aspirin_30days <- cdm$aspirin_last %>% 
  mutate(start_30_days = as.Date(!!dateadd("cohort_start_date", 30))) |>
  exitAtFirstDate(dateColumns = c("start_30_days", "cohort_end_date"),
                  name = "aspirin_30days")
```

- Death cohort:

. . .

```{r}
cohortCount(cdm$aspirin_death)
```

::: {style="margin-bottom: 20px;"}
:::

. . .

```{r}
cohortAttrition(cdm$aspirin_death)
```

## Your turn 

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

- 30 days cohort:

. . .

```{r}
cdm$aspirin_30days |>
  group_by(exit_reason) |>
  tally()
```

::: {style="margin-bottom: 20px;"}
:::

. . .

*Move forward in the presentation to get some tips on how to solve it…*

. . .

*Or don’t, and try to solve it with the content seen so far! :)*

## Tips

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 20px;"}
:::

**1) Death cohort**

  - Use the function to update cohort end to the death date, and tune its arguments to obtain a cohort restricted to people with a death event.

::: {style="margin-bottom: 10px;"}
:::

. . .

**2) 30 days aspirin**

  - Create a new column by adding 30 days to cohort start date. 

  - **!Warning:** To add dates in SQL tables (e.g. OMOP CDM cohorts) you can use the function `dateadd` from CDMConnector.

  - Use the adequate function to update the cohort end date to be the first of this new date column, or the previous cohort end date.

# Cohort manipulation

## Functions for cohort manipulations

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 25px;"}
:::

-   `collapseCohorts()`

::: {style="margin-bottom: 5px;"}
:::

-   `intersectCohorts()`

::: {style="margin-bottom: 5px;"}
:::

-   `matchCohorts()`

::: {style="margin-bottom: 5px;"}
:::

-   `stratifyCohorts()`

::: {style="margin-bottom: 5px;"}
:::

-   `subsetCohorts()`

::: {style="margin-bottom: 5px;"}
:::

-   `unionCohorts()`

::: {style="margin-bottom: 5px;"}
:::

-   `yearCohorts()`

## Cohort manipulation functions - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

-   We can generate a new cohort that contains people who had an exposure to both diclofenac and acetaminophen at the same time using `intersectCohorts()`.

. . .

```{r}
cdm$intersection <- cdm$medications %>% 
  CohortConstructor::intersectCohorts(
    gap = 0,
    mutuallyExclusive = TRUE,
    returnOnlyComb = FALSE,
    name = "intersection"
  )

settings(cdm$intersection)
```

## Matched cohort - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 25px;"}
:::

-   The `matchCohort` functions generates a new cohort by matching on age and sex from a target cohort.

-   For example, to compare individuals who take diclofenac to the general population, we can create a matched cohort as follows:

. . .

```{r}
cdm$diclofenac_match <- cdm$medications %>% 
  matchCohorts(
    cohortId = 1,
    matchSex = TRUE,
    matchYearOfBirth = TRUE,
    ratio = 5,
    name = "diclofenac_match"
  )
settings(cdm$diclofenac_match)
```

## Matched cohort - Example

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 25px;"}
:::

```{r}
cohortCount(cdm$diclofenac_match)
```

. . .

-   Attrition for the matched cohort

. . .

```{r, echo=FALSE}
summary(cdm$diclofenac_match) |> 
  visOmopResults::filterSettings(cohort_name == "diclofenac_matched") |>
  plotCohortAttrition()
```


## Your turn

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

- [*Collapse asipirin exposures*: Overwrite your concept-based "aspirin" cohort by merging any aspirin exposures for the same subject that occur within 7 days of each other.] --> pending on issue

::: {style="margin-bottom: 10px;"}
:::

- *Create yearly cohorts*: From your collapsed cohort, create five separate cohorts. Each cohort should include records for one specific year from the following list: 1965, 1967, 1968, 1969, and 1970.

. . .

*Move forward in the presentation for the results.*

## Your turn

![](logoCC.png){.absolute right="70px" top="0px" width="70" height="70"} ![](logoHDS.png){.absolute right="0px" top="0px" width="70" height="70"}

::: {style="margin-bottom: 10px;"}
:::

```{r, echo=FALSE}
cdm$aspirin <- cdm$aspirin |>
  # collapseCohorts(gap = 7) |>
  yearCohorts(years = 1965:1970)
```

```{r}
cohortCount(cdm$aspirin)
```

::: {style="margin-bottom: 10px;"}
:::

. . .

```{r}
cohortAttrition(cdm$aspirin)
```


# Thank you for your attention! {.title-slide}

**Questions?**

::: title-slide-logos
<img src="logoCC.png" alt="Logo 1" class="logo"/> <img src="logoHDS.png" alt="Logo 2" class="logo"/> <img src="logoOHDSI.png" alt="Logo 3" class="logo"/>
:::
