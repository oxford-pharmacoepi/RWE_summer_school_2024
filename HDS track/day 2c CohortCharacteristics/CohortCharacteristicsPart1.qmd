---
title: "CohortCharacteristics"
subtitle: "Part 1: Counts, Attrition, Overlap, Timing"
format:
  revealjs: 
    theme: [simple, styleSS24.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Oxford Summer School 2024"
execute:
  echo: true
  eval: true
editor: visual
---

## Context

```{r, echo = FALSE}
options(width = 120)
```

. . .

This package aims to standardise and provide the tools to conduct Characterisation studies as of the Darwin-EU Catalogue of Standard Analytics.

![](https://www.benzifoundation.org/wp-content/uploads/2023/09/eu-darwin-1.png){fig-align="center"}

## Package overview

-   [v0.2.1 on cran](https://CRAN.R-project.org/package=CohortCharacteristics)

-   [package website](https://darwin-eu-dev.github.io/CohortCharacteristics/)

. . .

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center" width="5.5in"}

## Functions

-   [**summariseCohortCount**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortCount.html)

-   [**summariseCohortAttrition**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortAttrition.html)

-   [summariseCharacteristics](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html) (Part 2)

-   [summariseLargeScaleCharacteristics](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html) (Part 2)

-   [**summariseCohortOverlap**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html)

-   [**summariseCohortTiming**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html)

## Workflow

We have three types of functions:

-   **summarise**: these functions produce an standardised output to summarise a cohort. This standard output is called summarised_result.

-   **plot**: these functions produce plots (currently, only ggplot, but working to implement plotly) from a summarised_result object.

-   **table**: these functions produce tables (gt and flextable) from a summarised_result object.

. . .

```{r, eval = FALSE}
result <- summariseXXX(...)
```

. . .

```{r, eval = FALSE}
tableXXX(result)
```

. . .

```{r, eval = FALSE}
plotXXX(result)
```

. . .

```{mermaid}
%%| echo: false
flowchart LR
  A[summarise function ] --> B[Plot function ]
  A --> C[Table function ]
```

## Create the cdm reference

```{r}
library(CDMConnector)
library(dplyr)
library(tidyr)
library(DBI)

db <- DBI::dbConnect(duckdb::duckdb(),  dbdir = eunomia_dir())
cdm <- cdm_from_con(con = db, cdm_schema = "main", write_schema = "main")
```

```{r, message=TRUE}
cdm
```

## Let's instantiate some cohorts

```{r}
library(CohortConstructor)

cdm$sinusitis <- conceptCohort(
  cdm = cdm,
  name = "sinusitis",
  conceptSet = list(
    "bacterial_sinusitis" = 4294548, 
    "viral_sinusitis" = 40481087, 
    "chronic_sinusitis" = 257012, 
    "any_sinusitis" = c(4294548, 40481087, 257012)
  )
)

```

## summariseCohortCount

. . .

Lets see the sinusitis cohorts

. . .

```{r}
cdm$sinusitis
```

## summariseCohortCount

. . .

Lets see the settings of the sinusitis cohorts

. . .

```{r}
cdm$sinusitis |> settings() |> print(n = Inf)
```

## summariseCohortCount

We can easily extract metadata about the counts in this cohort:

```{r}
cdm$sinusitis |> cohortCount()
```

## summariseCohortCount

We can export this metadata using `summariseCohortCount`:

```{r}
library(CohortCharacteristics)
cdm$sinusitis |>
  summariseCohortCount() |>
  glimpse()
```

## tableCohortCount

We can easily create a gt or flextable from the output of summariseCohortCount:

```{r, warning=TRUE, message = TRUE}
cdm$sinusitis |>
  summariseCohortCount(cohortId = 1:4) |>
  tableCohortCount()
```

## tableCohortCount

You can easily suppress a summarised_result using the suppress function:

```{r}
cdm$sinusitis |>
  summariseCohortCount(cohortId = 1:4) |>
  suppress(minCellCount = 5) |>
  tableCohortCount()
```

## tableCohortCount

We can easily create a gt or flextable from the output of summariseCohortCount:

```{r}
cdm$sinusitis |>
  PatientProfiles::addSex() |>
  summariseCohortCount(strata = "sex") |>
  tableCohortCount(header = c("group"), groupColumn = "sex")
```

## export gt tables

[gt](https://gt.rstudio.com/) tables can easily be exported to word:

```{r}
myTable <- cdm$sinusitis |>
  PatientProfiles::addSex() |>
  summariseCohortCount(strata = "sex") |>
  tableCohortCount(header = c("group"), groupColumn = "sex")
```

. . .

```{r, eval=FALSE}
library(gt)
myTable |> gt::gtsave("table.docx")
```

![](word.png)

## summariseCohortAttrition

We can easily extract metadata about the attrition of a cohort:

```{r}
cdm$sinusitis |> attrition()
```

## summariseCohortAttrition

We can export this metadata using `summariseCohortAttrition`:

```{r}
cdm$sinusitis |>
  summariseCohortAttrition() |>
  glimpse()
```

## plotCohortAttrition

We can easily create a diagram from the output of summariseCohortAttrition:

```{r}
cdm$sinusitis |>
  summariseCohortAttrition() |>
  plotCohortAttrition()
```

## plotCohortAttrition

We can easily create a diagram from the output of summariseCohortAttrition:

```{r}
cdm$sinusitis |> settings()
```

## plotCohortAttrition

We can easily create a diagram from the output of summariseCohortAttrition:

```{r}
cdm$sinusitis |>
  summariseCohortAttrition() |>
  plotCohortAttrition(cohortId = 1)
```

## Your turn

Can you create a cohort with the following attrition?

-   all records of sinusitis (4294548, 40481087, 257012)

-   only first record per person (requireIsFirstEntry)

-   restrict to female individuals (requireSex)

-   restrict to children between 5 and 12 years old (requireAge)

-   plot attrition (summariseCohortAttrition + plotCohortAttrition)

## Your turn

```{r, echo = FALSE}
cdm$my_cohort <- conceptCohort(cdm = cdm, conceptSet = list(sinusitis = c(4294548, 40481087, 257012)), name = "my_cohort") |>
  requireIsFirstEntry() |>
  requireSex(sex = "Female") |>
  requireAge(ageRange = c(5, 12))

cdm$my_cohort |> 
  summariseCohortAttrition() |>
  plotCohortAttrition()
```

## summariseCohortOverlap

summariseCohortOverlap identifies the overlap (number of subjects) between cohorts:

```{r}
result <- summariseCohortOverlap(cdm$sinusitis)
result |>
  glimpse()
```

## tableCohortOverlap

We can easily display them in a gt table with tableCohortOverlap:

. . .

```{r}
tableCohortOverlap(result)
```

## plotCohortOverlap

We can easily have a plot of the overlap with plotCohortOverlap:

. . .

```{r}
plotCohortOverlap(result)
```

## Your turn

Create 3 drug cohorts from these 5: - aspirin - acetaminophen - naproxen - amoxicillin - ibuprofen

Identify the subject overlap between them

## Your turn

Create 3 drug cohorts from these 5: - aspirin - acetaminophen - naproxen - amoxicillin - ibuprofen

*Remember there is a function in CodelistGenerator::getDrugIngredientCodes*

Identify the subject overlap between them and create a plot to show the overlap

## Your turn

```{r, echo = FALSE}
library(CodelistGenerator)
cdm$my_cohort <- conceptCohort(
  cdm = cdm, 
  conceptSet = getDrugIngredientCodes(cdm = cdm, name = c("aspirin", "acetaminophen", "amoxicillin")),
  name = "my_cohort")

cdm$my_cohort |>
  summariseCohortOverlap() |>
  plotCohortOverlap()
```

## summariseCohortTiming

We have a function to identify the time between cohorts to see which cohorts occur first compared to the other.

Lets create some medications cohorts:

```{r}
cdm$medications <- conceptCohort(
  cdm = cdm, 
  conceptSet = getDrugIngredientCodes(
    cdm = cdm, name = c("warfarin", "acetaminophen", "morphine")
  ),
  name = "medications"
)
```

## summariseCohortTiming

. . .

```{r, eval = F}
summaryTiming <- cdm$medications |>
  summariseCohortTiming(restrictToFirstEntry = TRUE)
summaryTiming |>
  glimpse()
```

. . .

```{r, eval = T, echo = F}
summaryTiming <- cdm$medications |>
  summariseCohortTiming(restrictToFirstEntry = TRUE)
summaryTiming |>
  glimpse()
```

## tableCohortTiming

. . .

```{r, eval = F}
summaryTiming |> tableCohortTiming(timeScale = "years")
```

. . .

```{r, echo = F}
summaryTiming |> tableCohortTiming(timeScale = "years")
```

## plotCohortTiming

. . .

```{r, eval = F}
summaryTiming |>
  plotCohortTiming(timeScale = "years", facet = "cdm_name", colour = c("group_level"))
```

. . .

```{r, echo = F}
summaryTiming |>
  plotCohortTiming(timeScale = "years", facet = "cdm_name", colour = c("group_level"))
```

## plotCohortTiming

. . .

```{r, error = TRUE}
summaryTiming |>
  plotCohortTiming(timeScale = "years", facet = "cdm_name", colour = c("group_level"), plotType = "density")
```

## plotCohortTiming

```{r}
summaryTiming <- cdm$medications |>
  summariseCohortTiming(restrictToFirstEntry = TRUE, density = TRUE)
```

. . .

```{r, eval = F}
summaryTiming |>
  plotCohortTiming(timeScale = "years", facet = "cdm_name", colour = c("group_level"), plotType = "density")
```

## plotCohortTiming

```{r, echo = F}
summaryTiming |>
  plotCohortTiming(timeScale = "years", facet = "cdm_name", colour = c("group_level"), plotType = "density")
```

## Your turn

Can you do a density plot of the three cohorts that you created before (for the overlap exercice)?

## Your turn

```{r, echo = FALSE}
cdm$my_cohort |> 
  summariseCohortTiming(density = TRUE) |>
  plotCohortTiming(timeScale = "years", plotType = "density", facet = "cdm_name", colour = "group_level")
```

#  {.end-slide}

::: {style="margin-bottom: 25px;"}
:::

::: {style="margin-bottom: 25px;"}
:::

::: columns
::: {.column width="35%"}
![](images/hexticker.png){style="right: 50%; top: 50%; height: 500; fig-align: center"}
:::

::: {.column width="65%"}
::: {style="margin-top: 135px;"}
:::

[**CohortCharacteristics**]{style="font-size: 100px;"}

::: {style="margin-bottom: 25px;"}
:::

[**Thank you for your attention!**]{style="font-size: 60px; text-align: left; color: grey"}

::: {style="margin-bottom: 25px;"}
:::

::: columns
::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**CRAN**](https://cran.r-project.org/package=CohortCharacteristics){style="color: #3a6ea5; text-decoration: underline;"}
:::

::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**Manual**](https://cran.r-project.org/web/packages/CohortCharacteristics/CohortCharacteristics.pdf){style="color: #3a6ea5; text-decoration: underline; text-align:center"}
:::

::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**GitHub**](https://github.com/darwin-eu-dev/CohortCharacteristics){style="color: #3a6ea5; text-decoration: underline; text-align:center"}
:::

::: {.column width="22%"}
::: {style="margin-bottom: 25px;"}
:::

[**Website**](https://darwin-eu-dev.github.io/CohortCharacteristics/){style="color: #3a6ea5; text-decoration: underline; text-align:center"}
:::

::: {.column width="1.2%"}
:::
:::
:::
:::
