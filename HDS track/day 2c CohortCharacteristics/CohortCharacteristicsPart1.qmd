---
title: "CohortCharacteristics"
subtitle: "Part 1: Counts, Attrition, Overlap, Timing"
format:
  revealjs: 
    theme: [simple, custom_1.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
execute:
  echo: true
  eval: true
editor: visual
---

## Context

```{r, echo = FALSE}
options(width = 130)
```
. . .

This package aims to standardise and provide the tools to conduct Characterisation studies as of the Darwin-EU Catalogue of Standard Analytics.

![](https://www.benzifoundation.org/wp-content/uploads/2023/09/eu-darwin-1.png){fig-align="center"}

## Package overview

-   [v0.2.1 on cran](https://CRAN.R-project.org/package=CohortCharacteristics)

-   [package website](https://darwin-eu-dev.github.io/CohortCharacteristics/)

. . .

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center" width="5.5in"}

## Functions

-   [**summariseCohortCount**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortCount.html)

-   [**summariseCohortAttrition**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortAttrition.html)

-   [summariseCharacteristics](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html) (Part 2)

-   [summariseLargeScaleCharacteristics](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html) (Part 2)

-   [**summariseCohortOverlap**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html)

-   [**summariseCohortTiming**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html)


## Workflow

We have three types of functions:

-   **summarise**: these functions produce an standardised output to summarise a cohort. This standard output is called summarised_result.

-   **plot**: these functions produce plots (currently, only ggplot, but working to implement plotly) from a summarised_result object.

-   **table**: these functions produce tables (gt and flextable) from a summarised_result object.

. . .

```{r, eval = FALSE}
result <- summariseXXX(...)
```

. . .

```{r, eval = FALSE}
tableXXX(result)
```

. . .

```{r, eval = FALSE}
plotXXX(result)
```

. . .

```{mermaid}
%%| echo: false
flowchart LR
  A[summarise function ] --> B[Plot function ]
  A --> C[Table function ]
```

## Create the cdm reference

```{r}
library(CDMConnector)
library(dplyr)
library(tidyr)
library(DBI)

db <- DBI::dbConnect(duckdb::duckdb(),  dbdir = eunomia_dir())
cdm <- cdm_from_con(con = db, cdm_schema = "main", write_schema = "main")
```

```{r, message=TRUE}
cdm
```

## Let's instantiate some cohorts

```{r}
library(CohortConstructor)

cdm$sinusitis <- conceptCohort(
  cdm = cdm,
  name = "sinusitis",
  conceptSet = list(
    "bacterial_sinusitis" = 4294548, 
    "viral_sinusitis" = 40481087, 
    "chronic_sinusitis" = 257012, 
    "any_sinusitis" = c(4294548, 40481087, 257012)
  )
) |>
  requireSex(sex = c("Both", "Male", "Female")) |>
  requireAge(ageRange = list(c(0, 150), c(0, 17), c(18, 150)))

cdm <- conceptCohort(
  cdm = cdm, 
  conceptSet = list(
    "warfarin" = c(1310149 40163554),
    "musculoskeletal_system" = c(1118088, 1557272, 40162359, 1124300, 1115008, 40173590, 1118084, 42707627, 19019273, 19019979, 19078461, 19003953, 1112807, 1115171, 1177480),
    "antiinfectives_for_systemic_use" = c(19129655, 1728416, 920293, 19074841, 920300, 920334, 19074843, 19075001, 19073183, 19073188, 1713671, 1729720, 19006318, 1778162, 46275444, 1717327, 1738521, 1741122, 1759842, 1713332, 1746114, 1768849, 46233710, 19133873, 46233988, 19133905),
    "nervous_system" = c(708298, 701322, 723013, 1129625, 1110410, 753626, 1124957, 1102527, 1125315, 782043, 791967, 1119510, 19078219, 757627, 40220386, 740275, 40223774, 1154029, 1127078, 1127433, 40222846, 19057271, 40223768, 45892894, 705944, 715997, 19078924, 19076374, 19077572, 40229134, 19059056, 19016749, 40236446, 19074679, 742185, 40231925, 1112807, 35605858, 40162522, 782047, 19039298, 19059528, 836654, 836659, 19115351, 19023398, 19002770, 19123231, 19133768, 40165015),
    "dermatologicals" = c(1129625, 1149380, 1124300, 836654, 1595799, 975125, 19008572),
    "respiratory_system" = c(1129625, 1149196, 1149380, 1150770, 1150836, 1153428, 1107830, 1110410, 738818, 1124957, 40169216, 1125443, 1119510, 1137529, 1154615, 1154343, 40223821, 19019979, 19112599, 40223834, 43012036, 40229134, 19029476, 19078461, 40232448, 1177480, 1192710, 1343916, 1150771, 1150837, 1107882, 975125, 1174888, 40169281, 40228214, 40228230, 19125062)
  ),
  name = "medications"
)
```



## summariseCohortCount

. . .

We have created a cohort using eunomia that contains different conditions:

. . .

```{r, eval = F}
cdm$conditions
cdm$conditions |> settings()
```

. . .

```{r, echo = F}
cdm$conditions
cdm$conditions |> settings()
```

## summariseCohortCount

We can easily extract metadata about the counts in this cohort:

```{r}
cdm$conditions |> cohortCount()
```

## summariseCohortCount

We can export this metadata using `summariseCohortCount`:

```{r}
library(CohortCharacteristics)
cdm$conditions |>
  summariseCohortCount() |>
  glimpse()
```

## tableCohortCount

We can easily create a gt or flextable from the output of summariseCohortCount:

```{r}
cdm$conditions |>
  summariseCohortCount() |>
  tableCohortCount()
```

## tableCohortCount

We can easily create a gt or flextable from the output of summariseCohortCount:

```{r}
cdm$conditions |>
  addSex() |>
  summariseCohortCount(strata = "sex") |>
  tableCohortCount(header = c("group"), groupColumn = "sex")
```

## summariseCohortAttrition

We can easily extract metadata about the attrition of a cohort:

```{r}
cdm$new_sinusitis |> attrition()
```

## summariseCohortAttrition

We can export this metadata using `summariseCohortAttrition`:

```{r}
cdm$new_sinusitis |>
  summariseCohortAttrition() |>
  glimpse()
```

## plotCohortAttrition

We can easily create a diagram from the output of summariseCohortAttrition:

```{r}
cdm$new_sinusitis |>
  summariseCohortAttrition() |>
  plotCohortAttrition()
```

## plotCohortAttrition

We can easily create a diagram from the output of summariseCohortAttrition:

```{r}
cdm$new_sinusitis |> settings()
```

## plotCohortAttrition

We can easily create a diagram from the output of summariseCohortAttrition:

```{r}
cdm$new_sinusitis |>
  summariseCohortAttrition() |>
  plotCohortAttrition(cohortId = 1)
```

## summariseCharacteristics

. . .

```{r, echo = T, eval = F}
cdm$new_sinusitis |>
  addAge(ageGroup = list(c(0, 4), c(5, 9), c(10, 14), c(15, 18))) |>
  summariseCharacteristics(
    strata = list("age_group"),
    demographics = TRUE,
    ageGroup = list(c(0, 4), c(5, 9), c(10, 14), c(15, 18)),
    tableIntersectCount = list(
      "Number of visits prior year" = list(
        tableName = "visit_occurrence", window = c(-365, 0)
      )
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(
        targetCohortTable = "conditions", window = c(-Inf, 0)
      ),
      "Medications prior year" = list(
        targetCohortTable = "medications", window = c(-365, 0)
      )
    )
  )
```

## summariseCharacteristics

```{r, echo = F, eval = T}
cdm$new_sinusitis |>
  addAge(ageGroup = list(c(0, 4), c(5, 9), c(10, 14), c(15, 18))) |>
  summariseCharacteristics(
    strata = list("age_group"),
    demographics = TRUE,
    ageGroup = list(c(0, 4), c(5, 9), c(10, 14), c(15, 18)),
    tableIntersectCount = list(
      "Number of visits prior year" = list(
        tableName = "visit_occurrence", window = c(-365, 0)
      )
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(
        targetCohortTable = "conditions", window = c(-Inf, 0)
      ),
      "Medications prior year" = list(
        targetCohortTable = "medications", window = c(-365, 0)
      )
    )
  ) |>
  glimpse()
```

## tableCharacteristics

```{r, echo = F, eval = T}
result <- cdm$new_sinusitis |>
  addAge(ageGroup = list(c(0, 4), c(5, 9), c(10, 14), c(15, 18))) |>
  summariseCharacteristics(
    strata = list("age_group"),
    demographics = TRUE,
    ageGroup = list(c(0, 4), c(5, 9), c(10, 14), c(15, 18)),
    tableIntersectCount = list(
      "Number of visits prior year" = list(
        tableName = "visit_occurrence", window = c(-365, 0)
      )
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(
        targetCohortTable = "conditions", window = c(-Inf, 0)
      ),
      "Medications prior year" = list(
        targetCohortTable = "medications", window = c(-365, 0)
      )
    )
  )
```

```{r}
result |>
  tableCharacteristics(header = "strata", groupColumn = "cohort_name")
```

## tableCharacteristics

```{r, eval = F}
result |>
  filter(group_level == "any_sinusitis") |>
  tableCharacteristics(
    header = c("strata"),
    formatEstimateName = c(
      "N(%)" = "<count> (<percentage>%)",
      "N" = "<count>",
      "median [IQR]" = "<median> [<q25> - <q75>]"
    ),
    excludeColumns = c(
      "cdm_name", "result_id", "estimate_type", "additional_name", "additional_level", "cohort_name"
    ),
    .options = list(keepNotFormatted = FALSE)
  )
```

## tableCharacteristics

```{r, eval = T, echo = F}
result |>
  filter(group_level == "any_sinusitis") |>
  tableCharacteristics(
    header = c("strata"),
    formatEstimateName = c(
      "N(%)" = "<count> (<percentage>%)",
      "N" = "<count>",
      "median [IQR]" = "<median> [<q25> - <q75>]"
    ),
    excludeColumns = c(
      "cdm_name", "result_id", "estimate_type", "additional_name", "additional_level", "cohort_name"
    ),
    .options = list(keepNotFormatted = FALSE)
  )
```

## export gt tables

[gt](https://gt.rstudio.com/) tables can easily be exported to word:

```{r, eval=T, echo = F}
myTable <- result |>
  filter(group_level == "any_sinusitis") |>
  tableCharacteristics(
    header = c("strata"),
    formatEstimateName = c(
      "N(%)" = "<count> (<percentage>%)",
      "N" = "<count>",
      "median [IQR]" = "<median> [<q25> - <q75>]"
    ),
    excludeColumns = c(
      "cdm_name", "result_id", "estimate_type", "additional_name", "additional_level", "cohort_name"
    ),
    .options = list(keepNotFormatted = FALSE)
  )
```

```{r, eval = F, echo = T}
myTable |> gt::gtsave("table.docx")
```

![](word.png)

## plotCharacteristics

```{r}
result |>
  filter(variable_name == "Age" & strata_level == "overall") |>
  plotCharacteristics(plotStyle = "boxplot", colour = "group_level")
```

## plotCharacteristics

```{r}
result |>
  filter(
    variable_name == "Conditions any time prior" & 
      strata_level == "overall" &
      estimate_name == "percentage"
  ) |>
  plotCharacteristics(x = "group_level", colour = "group_level", facet = "variable_level")
```

## summariseLargeScaleCharacterisation

```{r}
result <- cdm$sinusitis |>
  summariseLargeScaleCharacteristics(
    window = list(c(-Inf, -1), c(1, Inf)),
    eventInWindow = "condition_occurrence",
    #episodeInWindow = "drug_exposure",
    minimumFrequency = 0.05
  )
result |> glimpse()
```

## tableLargeScaleCharacteristics

```{r}
tableLargeScaleCharacteristics(result, topConcepts = 10)
```

## plotLargeScaleCharacteristics

```{r, eval = F}
result |>
  plotLargeScaleCharacteristics(
    facet = "variable_level",
    colorVars= c("group_level")
  ) +
  ylab("") +
  xlab("Percentage") +
  theme_minimal() +
  theme(legend.position = "top", legend.title = element_blank())
```

## plotLargeScaleCharacteristics

```{r, echo = F}
result |>
  plotLargeScaleCharacteristics(
    facet = "variable_level",
    colorVars= c("group_level")
  ) +
  ylab("") +
  xlab("Percentage") +
  theme_minimal() +
  theme(legend.position = "top", legend.title = element_blank())
```

## plotComparedLargeScaleCharacteristics

```{r}
p <- result |>
  filter(group_level == "any_sinusitis") |>
  plotComparedLargeScaleCharacteristics(
    referenceVariableLevel = "-inf to -1"
  ) +
  theme(legend.position = "none") 
p |>
  plotly::ggplotly()
```

## summariseCohortOverlap

```{r}
result <- summariseCohortOverlap(cdm$sinusitis)
result |>
  glimpse()
```

## tableCohortOverlap

```{r}
tableCohortOverlap(result)
```

## plotCohortOverlap

```{r}
plotCohortOverlap(result)
```

## summariseCohortTiming

. . .

```{r}
library(CodelistGenerator)
cdm <- generateConceptCohortSet(
  cdm = cdm, 
  name = "meds",
  limit = "all", 
  end = "event_end_date",
  conceptSet = getDrugIngredientCodes(cdm = cdm, name = c("acetaminophen", "morphine", "warfarin"))
)
```

## summariseCohortTiming

. . .

```{r, eval = F}
meds_timing <- cdm$meds |>
  summariseCohortTiming(restrictToFirstEntry = TRUE)
meds_timing |>
  glimpse()
```

. . .

```{r, eval = T, echo = F}
meds_timing <- cdm$meds |>
  summariseCohortTiming(restrictToFirstEntry = TRUE)
meds_timing |>
  glimpse()
```

## tableCohortTiming

. . .

```{r, eval = F}
tableCohortTiming(
  meds_timing,
  timeScale = "years", 
  .options = list(decimals = c(numeric = 0)),
  excludeColumns = c("cdm_name", "result_id", "estimate_type")
)
```

. . .

```{r, echo = F}
tableCohortTiming(
  meds_timing,
  timeScale = "years",
  .options = list(decimals = c(numeric = 0)),
  excludeColumns = c("cdm_name", "result_id", "estimate_type")
)
```

## plotCohortTiming

. . .

```{r, eval = F}
plotCohortTiming(meds_timing, timeScale = "years", facet = "cdm_name", colour = c("group_level")) +
  theme_bw() +
  theme(legend.position = "none", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

. . .

```{r, echo = F}
plotCohortTiming(meds_timing, timeScale = "years", facet = "cdm_name", colour = c("group_level")) +
  theme_bw() +
  theme(legend.position = "none", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

## plotCohortTiming

. . .

```{r, eval = F}
meds_timing <- cdm$meds |>
  summariseCohortTiming(restrictToFirstEntry = TRUE, density = TRUE)
plotCohortTiming(meds_timing, timeScale = "years", plotType = "density", colour = c("group_level"))
```

. . .

```{r, echo = F}
meds_timing <- cdm$meds |>
  summariseCohortTiming(restrictToFirstEntry = TRUE, density = TRUE)
plotCohortTiming(meds_timing, timeScale = "years", plotType = "density", colour = c("group_level"))
```



